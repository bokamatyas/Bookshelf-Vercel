definition:
  openapi: "3.1.0"
  info:
    title: "Bookshelf Backend API"
    version: "0.1.0"
    description: "The backend API route descriptions used by Bookshelf"
    license:
      name: "MIT"
      url: "https://spdx.org/licenses/MIT.html"
  servers:
    - url: "http://localhost:3000/"

apis: [./src/swagger.yaml]

components:
  schemas:
    user:
      type: object
      properties:
        _id:
          type: object
        username:
          type: string
        password_hashed:
          type: string
        email:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        last_login:
          type: string
        role:
          type: string
        booklist:
          type: array
      example:
        _id: 67a5c3cba3bb48fa646f9638
        username: User
        password_hashed: $2b$10$Tk179TvlrUQqQuxU/XHoI.rP/edBea12duhNIOTV2VO9FZZhvRo5S
        email: email@email.com
        role: user
        booklist: []
        created_at: 2025-02-07T08:26:51.424Z
        updated_at: 2025-02-07T08:26:51.424Z
        last_login: 2025-02-07T08:26:51.424Z

  requestBodies:
    user:
      type: object
      required:
        - username
        - password
        - email
        - role
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string

tags:
  - name: login
    description: Login feature
  - name: Users
    description: Routes managing users
paths:
  /api/login:
    post:
      summary: Login for a user
      tags:
        - login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Verification token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: Bad request body
        403:
          description: Invalid username or password
              
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        200:
          description: The list of requested users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'

    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/user'
      responses:
        200:
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
